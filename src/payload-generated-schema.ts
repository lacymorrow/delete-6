/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type { } from "@payloadcms/db-postgres";
import {
  pgSchema,
  index,
  uniqueIndex,
  foreignKey,
  integer,
  varchar,
  timestamp,
  serial,
  numeric,
  text,
  jsonb,
  boolean,
} from "@payloadcms/db-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-postgres/drizzle";
export const db_schema = pgSchema("payload");
export const enum_pages_blocks_hero_style = db_schema.enum(
  "enum_pages_blocks_hero_style",
  ["default", "centered", "split"],
);
export const enum_pages_blocks_content_width = db_schema.enum(
  "enum_pages_blocks_content_width",
  ["default", "wide", "narrow"],
);
export const enum_pages_blocks_content_background = db_schema.enum(
  "enum_pages_blocks_content_background",
  ["none", "gray", "accent"],
);
export const enum_pages_blocks_features_layout = db_schema.enum(
  "enum_pages_blocks_features_layout",
  ["grid", "list", "carousel"],
);
export const enum_pages_blocks_features_columns = db_schema.enum(
  "enum_pages_blocks_features_columns",
  ["2", "3", "4"],
);
export const enum_pages_blocks_testimonials_layout = db_schema.enum(
  "enum_pages_blocks_testimonials_layout",
  ["grid", "slider", "single"],
);
export const enum_pages_blocks_testimonials_background = db_schema.enum(
  "enum_pages_blocks_testimonials_background",
  ["none", "light", "dark"],
);
export const enum_faqs_category = db_schema.enum("enum_faqs_category", [
  "general",
  "technical",
  "pricing",
  "support",
]);
export const enum_features_plans = db_schema.enum("enum_features_plans", [
  "bones",
  "muscles",
  "brains",
]);
export const enum_features_category = db_schema.enum("enum_features_category", [
  "core",
  "dx",
  "backend",
  "advanced",
  "security",
  "devops",
  "support",
]);
export const enum_features_badge = db_schema.enum("enum_features_badge", [
  "new",
  "popular",
  "pro",
]);
export const enum_rbac_type = db_schema.enum("enum_rbac_type", [
  "role",
  "permission",
]);
export const enum_rbac_resource = db_schema.enum("enum_rbac_resource", [
  "team",
  "project",
  "user",
  "api_key",
  "billing",
  "settings",
]);
export const enum_rbac_action = db_schema.enum("enum_rbac_action", [
  "create",
  "read",
  "update",
  "delete",
  "manage",
]);

export const users_sessions = db_schema.table(
  "users_sessions",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    id: varchar("id").primaryKey(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    expiresAt: timestamp("expires_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index("users_sessions_order_idx").on(columns._order),
    _parentIDIdx: index("users_sessions_parent_id_idx").on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [users.id],
      name: "users_sessions_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const users = db_schema.table(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const pages_blocks_hero = db_schema.table(
  "pages_blocks_hero",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    heading: varchar("heading").notNull(),
    subheading: varchar("subheading"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    ctaText: varchar("cta_text"),
    ctaLink: varchar("cta_link"),
    style: enum_pages_blocks_hero_style("style").default("default"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_hero_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_hero_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_hero_path_idx").on(columns._path),
    pages_blocks_hero_image_idx: index("pages_blocks_hero_image_idx").on(
      columns.image,
    ),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_hero_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_content = db_schema.table(
  "pages_blocks_content",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    content: jsonb("content").notNull(),
    width: enum_pages_blocks_content_width("width").default("default"),
    background:
      enum_pages_blocks_content_background("background").default("none"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_content_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_content_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_content_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_content_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_features = db_schema.table(
  "pages_blocks_features",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    heading: varchar("heading"),
    layout: enum_pages_blocks_features_layout("layout").default("grid"),
    columns: enum_pages_blocks_features_columns("columns").default("3"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_features_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_features_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_features_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_features_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages_blocks_testimonials = db_schema.table(
  "pages_blocks_testimonials",
  {
    _order: integer("_order").notNull(),
    _parentID: integer("_parent_id").notNull(),
    _path: text("_path").notNull(),
    id: varchar("id").primaryKey(),
    heading: varchar("heading"),
    layout: enum_pages_blocks_testimonials_layout("layout").default("grid"),
    background:
      enum_pages_blocks_testimonials_background("background").default("none"),
    blockName: varchar("block_name"),
  },
  (columns) => ({
    _orderIdx: index("pages_blocks_testimonials_order_idx").on(columns._order),
    _parentIDIdx: index("pages_blocks_testimonials_parent_id_idx").on(
      columns._parentID,
    ),
    _pathIdx: index("pages_blocks_testimonials_path_idx").on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns["_parentID"]],
      foreignColumns: [pages.id],
      name: "pages_blocks_testimonials_parent_id_fk",
    }).onDelete("cascade"),
  }),
);

export const pages = db_schema.table(
  "pages",
  {
    id: serial("id").primaryKey(),
    title: varchar("title").notNull(),
    slug: varchar("slug").notNull(),
    meta_title: varchar("meta_title"),
    meta_description: varchar("meta_description"),
    meta_image: integer("meta_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    publishedAt: timestamp("published_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    pages_slug_idx: uniqueIndex("pages_slug_idx").on(columns.slug),
    pages_meta_meta_image_idx: index("pages_meta_meta_image_idx").on(
      columns.meta_image,
    ),
    pages_updated_at_idx: index("pages_updated_at_idx").on(columns.updatedAt),
    pages_created_at_idx: index("pages_created_at_idx").on(columns.createdAt),
  }),
);

export const pages_rels = db_schema.table(
  "pages_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    featuresID: integer("features_id"),
    testimonialsID: integer("testimonials_id"),
  },
  (columns) => ({
    order: index("pages_rels_order_idx").on(columns.order),
    parentIdx: index("pages_rels_parent_idx").on(columns.parent),
    pathIdx: index("pages_rels_path_idx").on(columns.path),
    pages_rels_features_id_idx: index("pages_rels_features_id_idx").on(
      columns.featuresID,
    ),
    pages_rels_testimonials_id_idx: index("pages_rels_testimonials_id_idx").on(
      columns.testimonialsID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [pages.id],
      name: "pages_rels_parent_fk",
    }).onDelete("cascade"),
    featuresIdFk: foreignKey({
      columns: [columns["featuresID"]],
      foreignColumns: [features.id],
      name: "pages_rels_features_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "pages_rels_testimonials_fk",
    }).onDelete("cascade"),
  }),
);

export const media = db_schema.table(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const faqs = db_schema.table(
  "faqs",
  {
    id: serial("id").primaryKey(),
    question: varchar("question").notNull(),
    answer: jsonb("answer").notNull(),
    category: enum_faqs_category("category"),
    order: numeric("order"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    faqs_updated_at_idx: index("faqs_updated_at_idx").on(columns.updatedAt),
    faqs_created_at_idx: index("faqs_created_at_idx").on(columns.createdAt),
  }),
);

export const features_plans = db_schema.table(
  "features_plans",
  {
    order: integer("order").notNull(),
    parent: integer("parent_id").notNull(),
    value: enum_features_plans("value"),
    id: serial("id").primaryKey(),
  },
  (columns) => ({
    orderIdx: index("features_plans_order_idx").on(columns.order),
    parentIdx: index("features_plans_parent_idx").on(columns.parent),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [features.id],
      name: "features_plans_parent_fk",
    }).onDelete("cascade"),
  }),
);

export const features = db_schema.table(
  "features",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    description: varchar("description").notNull(),
    category: enum_features_category("category").notNull(),
    badge: enum_features_badge("badge"),
    icon: varchar("icon"),
    order: numeric("order"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    features_updated_at_idx: index("features_updated_at_idx").on(
      columns.updatedAt,
    ),
    features_created_at_idx: index("features_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const testimonials = db_schema.table(
  "testimonials",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    role: varchar("role"),
    company: varchar("company"),
    testimonial: varchar("testimonial").notNull(),
    username: varchar("username"),
    verified: boolean("verified").default(false),
    featured: boolean("featured").default(false),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    testimonials_image_idx: index("testimonials_image_idx").on(columns.image),
    testimonials_updated_at_idx: index("testimonials_updated_at_idx").on(
      columns.updatedAt,
    ),
    testimonials_created_at_idx: index("testimonials_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const rbac = db_schema.table(
  "rbac",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    description: varchar("description").notNull(),
    type: enum_rbac_type("type").notNull(),
    resource: enum_rbac_resource("resource"),
    action: enum_rbac_action("action"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    rbac_updated_at_idx: index("rbac_updated_at_idx").on(columns.updatedAt),
    rbac_created_at_idx: index("rbac_created_at_idx").on(columns.createdAt),
  }),
);

export const rbac_rels = db_schema.table(
  "rbac_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    rbacID: integer("rbac_id"),
  },
  (columns) => ({
    order: index("rbac_rels_order_idx").on(columns.order),
    parentIdx: index("rbac_rels_parent_idx").on(columns.parent),
    pathIdx: index("rbac_rels_path_idx").on(columns.path),
    rbac_rels_rbac_id_idx: index("rbac_rels_rbac_id_idx").on(columns.rbacID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [rbac.id],
      name: "rbac_rels_parent_fk",
    }).onDelete("cascade"),
    rbacIdFk: foreignKey({
      columns: [columns["rbacID"]],
      foreignColumns: [rbac.id],
      name: "rbac_rels_rbac_fk",
    }).onDelete("cascade"),
  }),
);

export const vercel_deployments = db_schema.table(
  "vercel_deployments",
  {
    id: serial("id").primaryKey(),
    teamId: varchar("team_id"),
    projectId: varchar("project_id").notNull(),
    deploymentId: varchar("deployment_id").notNull(),
    deploymentDashboardUrl: varchar("deployment_dashboard_url"),
    deploymentUrl: varchar("deployment_url"),
    productionDeployHookUrl: varchar("production_deploy_hook_url"),
    projectDashboardUrl: varchar("project_dashboard_url"),
    projectName: varchar("project_name").notNull(),
    repositoryUrl: varchar("repository_url"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    vercel_deployments_project_id_idx: index(
      "vercel_deployments_project_id_idx",
    ).on(columns.projectId),
    vercel_deployments_deployment_id_idx: index(
      "vercel_deployments_deployment_id_idx",
    ).on(columns.deploymentId),
    vercel_deployments_updated_at_idx: index(
      "vercel_deployments_updated_at_idx",
    ).on(columns.updatedAt),
    vercel_deployments_created_at_idx: index(
      "vercel_deployments_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents = db_schema.table(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = db_schema.table(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    pagesID: integer("pages_id"),
    mediaID: integer("media_id"),
    faqsID: integer("faqs_id"),
    featuresID: integer("features_id"),
    testimonialsID: integer("testimonials_id"),
    rbacID: integer("rbac_id"),
    "vercel-deploymentsID": integer("vercel_deployments_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_pages_id_idx: index(
      "payload_locked_documents_rels_pages_id_idx",
    ).on(columns.pagesID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_faqs_id_idx: index(
      "payload_locked_documents_rels_faqs_id_idx",
    ).on(columns.faqsID),
    payload_locked_documents_rels_features_id_idx: index(
      "payload_locked_documents_rels_features_id_idx",
    ).on(columns.featuresID),
    payload_locked_documents_rels_testimonials_id_idx: index(
      "payload_locked_documents_rels_testimonials_id_idx",
    ).on(columns.testimonialsID),
    payload_locked_documents_rels_rbac_id_idx: index(
      "payload_locked_documents_rels_rbac_id_idx",
    ).on(columns.rbacID),
    payload_locked_documents_rels_vercel_deployments_id_idx: index(
      "payload_locked_documents_rels_vercel_deployments_id_idx",
    ).on(columns["vercel-deploymentsID"]),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    pagesIdFk: foreignKey({
      columns: [columns["pagesID"]],
      foreignColumns: [pages.id],
      name: "payload_locked_documents_rels_pages_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    faqsIdFk: foreignKey({
      columns: [columns["faqsID"]],
      foreignColumns: [faqs.id],
      name: "payload_locked_documents_rels_faqs_fk",
    }).onDelete("cascade"),
    featuresIdFk: foreignKey({
      columns: [columns["featuresID"]],
      foreignColumns: [features.id],
      name: "payload_locked_documents_rels_features_fk",
    }).onDelete("cascade"),
    testimonialsIdFk: foreignKey({
      columns: [columns["testimonialsID"]],
      foreignColumns: [testimonials.id],
      name: "payload_locked_documents_rels_testimonials_fk",
    }).onDelete("cascade"),
    rbacIdFk: foreignKey({
      columns: [columns["rbacID"]],
      foreignColumns: [rbac.id],
      name: "payload_locked_documents_rels_rbac_fk",
    }).onDelete("cascade"),
    "vercel-deploymentsIdFk": foreignKey({
      columns: [columns["vercel-deploymentsID"]],
      foreignColumns: [vercel_deployments.id],
      name: "payload_locked_documents_rels_vercel_deployments_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = db_schema.table(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = db_schema.table(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = db_schema.table(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const settings = db_schema.table("settings", {
  id: serial("id").primaryKey(),
  seedCompleted: boolean("seed_completed").default(false),
  seedCompletedAt: timestamp("seed_completed_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
  siteTitle: varchar("site_title").default("Shipkit"),
  siteDescription: varchar("site_description"),
  updatedAt: timestamp("updated_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
  createdAt: timestamp("created_at", {
    mode: "string",
    withTimezone: true,
    precision: 3,
  }),
});

export const relations_users_sessions = relations(
  users_sessions,
  ({ one }) => ({
    _parentID: one(users, {
      fields: [users_sessions._parentID],
      references: [users.id],
      relationName: "sessions",
    }),
  }),
);
export const relations_users = relations(users, ({ many }) => ({
  sessions: many(users_sessions, {
    relationName: "sessions",
  }),
}));
export const relations_pages_blocks_hero = relations(
  pages_blocks_hero,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_hero._parentID],
      references: [pages.id],
      relationName: "_blocks_hero",
    }),
    image: one(media, {
      fields: [pages_blocks_hero.image],
      references: [media.id],
      relationName: "image",
    }),
  }),
);
export const relations_pages_blocks_content = relations(
  pages_blocks_content,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_content._parentID],
      references: [pages.id],
      relationName: "_blocks_content",
    }),
  }),
);
export const relations_pages_blocks_features = relations(
  pages_blocks_features,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_features._parentID],
      references: [pages.id],
      relationName: "_blocks_features",
    }),
  }),
);
export const relations_pages_blocks_testimonials = relations(
  pages_blocks_testimonials,
  ({ one }) => ({
    _parentID: one(pages, {
      fields: [pages_blocks_testimonials._parentID],
      references: [pages.id],
      relationName: "_blocks_testimonials",
    }),
  }),
);
export const relations_pages_rels = relations(pages_rels, ({ one }) => ({
  parent: one(pages, {
    fields: [pages_rels.parent],
    references: [pages.id],
    relationName: "_rels",
  }),
  featuresID: one(features, {
    fields: [pages_rels.featuresID],
    references: [features.id],
    relationName: "features",
  }),
  testimonialsID: one(testimonials, {
    fields: [pages_rels.testimonialsID],
    references: [testimonials.id],
    relationName: "testimonials",
  }),
}));
export const relations_pages = relations(pages, ({ one, many }) => ({
  meta_image: one(media, {
    fields: [pages.meta_image],
    references: [media.id],
    relationName: "meta_image",
  }),
  _blocks_hero: many(pages_blocks_hero, {
    relationName: "_blocks_hero",
  }),
  _blocks_content: many(pages_blocks_content, {
    relationName: "_blocks_content",
  }),
  _blocks_features: many(pages_blocks_features, {
    relationName: "_blocks_features",
  }),
  _blocks_testimonials: many(pages_blocks_testimonials, {
    relationName: "_blocks_testimonials",
  }),
  _rels: many(pages_rels, {
    relationName: "_rels",
  }),
}));
export const relations_media = relations(media, () => ({}));
export const relations_faqs = relations(faqs, () => ({}));
export const relations_features_plans = relations(
  features_plans,
  ({ one }) => ({
    parent: one(features, {
      fields: [features_plans.parent],
      references: [features.id],
      relationName: "plans",
    }),
  }),
);
export const relations_features = relations(features, ({ many }) => ({
  plans: many(features_plans, {
    relationName: "plans",
  }),
}));
export const relations_testimonials = relations(testimonials, ({ one }) => ({
  image: one(media, {
    fields: [testimonials.image],
    references: [media.id],
    relationName: "image",
  }),
}));
export const relations_rbac_rels = relations(rbac_rels, ({ one }) => ({
  parent: one(rbac, {
    fields: [rbac_rels.parent],
    references: [rbac.id],
    relationName: "_rels",
  }),
  rbacID: one(rbac, {
    fields: [rbac_rels.rbacID],
    references: [rbac.id],
    relationName: "rbac",
  }),
}));
export const relations_rbac = relations(rbac, ({ many }) => ({
  _rels: many(rbac_rels, {
    relationName: "_rels",
  }),
}));
export const relations_vercel_deployments = relations(
  vercel_deployments,
  () => ({}),
);
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    pagesID: one(pages, {
      fields: [payload_locked_documents_rels.pagesID],
      references: [pages.id],
      relationName: "pages",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    faqsID: one(faqs, {
      fields: [payload_locked_documents_rels.faqsID],
      references: [faqs.id],
      relationName: "faqs",
    }),
    featuresID: one(features, {
      fields: [payload_locked_documents_rels.featuresID],
      references: [features.id],
      relationName: "features",
    }),
    testimonialsID: one(testimonials, {
      fields: [payload_locked_documents_rels.testimonialsID],
      references: [testimonials.id],
      relationName: "testimonials",
    }),
    rbacID: one(rbac, {
      fields: [payload_locked_documents_rels.rbacID],
      references: [rbac.id],
      relationName: "rbac",
    }),
    "vercel-deploymentsID": one(vercel_deployments, {
      fields: [payload_locked_documents_rels["vercel-deploymentsID"]],
      references: [vercel_deployments.id],
      relationName: "vercel-deployments",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);
export const relations_settings = relations(settings, () => ({}));

type DatabaseSchema = {
  db_schema: typeof db_schema;
  enum_pages_blocks_hero_style: typeof enum_pages_blocks_hero_style;
  enum_pages_blocks_content_width: typeof enum_pages_blocks_content_width;
  enum_pages_blocks_content_background: typeof enum_pages_blocks_content_background;
  enum_pages_blocks_features_layout: typeof enum_pages_blocks_features_layout;
  enum_pages_blocks_features_columns: typeof enum_pages_blocks_features_columns;
  enum_pages_blocks_testimonials_layout: typeof enum_pages_blocks_testimonials_layout;
  enum_pages_blocks_testimonials_background: typeof enum_pages_blocks_testimonials_background;
  enum_faqs_category: typeof enum_faqs_category;
  enum_features_plans: typeof enum_features_plans;
  enum_features_category: typeof enum_features_category;
  enum_features_badge: typeof enum_features_badge;
  enum_rbac_type: typeof enum_rbac_type;
  enum_rbac_resource: typeof enum_rbac_resource;
  enum_rbac_action: typeof enum_rbac_action;
  users_sessions: typeof users_sessions;
  users: typeof users;
  pages_blocks_hero: typeof pages_blocks_hero;
  pages_blocks_content: typeof pages_blocks_content;
  pages_blocks_features: typeof pages_blocks_features;
  pages_blocks_testimonials: typeof pages_blocks_testimonials;
  pages: typeof pages;
  pages_rels: typeof pages_rels;
  media: typeof media;
  faqs: typeof faqs;
  features_plans: typeof features_plans;
  features: typeof features;
  testimonials: typeof testimonials;
  rbac: typeof rbac;
  rbac_rels: typeof rbac_rels;
  vercel_deployments: typeof vercel_deployments;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  settings: typeof settings;
  relations_users_sessions: typeof relations_users_sessions;
  relations_users: typeof relations_users;
  relations_pages_blocks_hero: typeof relations_pages_blocks_hero;
  relations_pages_blocks_content: typeof relations_pages_blocks_content;
  relations_pages_blocks_features: typeof relations_pages_blocks_features;
  relations_pages_blocks_testimonials: typeof relations_pages_blocks_testimonials;
  relations_pages_rels: typeof relations_pages_rels;
  relations_pages: typeof relations_pages;
  relations_media: typeof relations_media;
  relations_faqs: typeof relations_faqs;
  relations_features_plans: typeof relations_features_plans;
  relations_features: typeof relations_features;
  relations_testimonials: typeof relations_testimonials;
  relations_rbac_rels: typeof relations_rbac_rels;
  relations_rbac: typeof relations_rbac;
  relations_vercel_deployments: typeof relations_vercel_deployments;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
  relations_settings: typeof relations_settings;
};

declare module "@payloadcms/db-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
